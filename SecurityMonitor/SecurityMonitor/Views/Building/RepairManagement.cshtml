@model SecurityMonitor.Models.RepairManagement

@{
    ViewBag.Title = "RepairManagement";
    Layout = "~/Views/Shared/_LayoutTenant .cshtml";
}

@{
    List<SelectListItem> items = new List<SelectListItem>();
    items.Add(new SelectListItem { Text = "Assign to New", Value = "1" });

}

<!--nAV bAR-->
<div class="row">


    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 headerDefault">
        <ol class="breadcrumb" style="line-height:20px;" id="clientbreadcrumbid">
            <li>@Html.ActionLink("Home", "index", "Home", null, new { @class = "breadcrumblink" })</li>
            <li>@Html.ActionLink("Client's Page", "ClientHome", "building", null, new { @class = "breadcrumblink" })</li>
            <li>@Html.ActionLink("Client's Profile", "ClientProfile", "building", new { ClientID = @Model.building.ClientID }, new { @class = "breadcrumblink" })</li>
            <li> @Html.ActionLink((string)@Model.building.BuildingName, "BuildingProfile", "building", new { buildingID = @Model.building.ID }, new { @class = "breadcrumblink" })</li>
            <li>Repair Management</li>
        </ol>
    </div>
</div>
<div class="row ">

    <div class="box">
        <div class="container-4 col-lg-6 col-md-6 col-sm-6 col-xs-6 ">
            <input type="search" id="search" class=" form-control input-xs" placeholder="Start Typing..." @*data-bind="value:Search, valueUpdate:'afterkeydown'"*@ />

        </div>
    </div>
</div>

<div class="row ">

    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 ">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 requestmanagementHeaderrows  ">
            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1   " style="border-right:1px solid #808080;">
                Date
            </div>

            <div class="col-lg-1 col-md-112 col-sm-1 col-xs-1  " style="border-right:1px solid #808080;">
                Status
            </div>
            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1  " style="border-right:1px solid #808080;">
                Urgency
            </div>
            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1  " style="border-right:1px solid #808080;">
                Request#
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6 repairmanagementdescription  " style="border-right:1px solid #808080;">
                Problem Description
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2  ">
                AssignTo
            </div>
        </div>
    </div>
</div>

<!--this are the rows-->
<div class="row " data-bind="foreach:RepairRequest">

    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 ">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 requestmanagementrows hollow5 " data-toggle="modal" data-target="#myModal" data-bind="click:selectedRequest">
            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1   " data-bind="text:RequestedDate">
                
            </div>

            <div class="col-lg-1 col-md-112 col-sm-1 col-xs-1  " data-bind="text:Status">
               
            </div>
            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1  " data-bind="text:Urgency">
              
            </div>
            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-1  " data-bind="text:RequestNumber">
               
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6 repairmanagementdescription  " data-bind="text:Description">
             
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 col-xs-2  " data-bind="text:AssignedFullName">
               
            </div>
        </div>
    </div>
</div>


<!--Request Form-->
<div class="modal fade" id="myModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Repair Request Details</h4>
            </div>
            <div class="modal-body lightgrey">
                <div class="col-lg-12 col-md-12">
                    <div data-bind="text:selectedRequestDate"></div>
                    <div data-bind="text:selectedDescription"></div>
                    <div data-bind="text:selectedStatus"></div>
                    <div data-bind="text:selectedRequestNumber"></div>
                    <div data-bind="text:selectedPName"></div>
                    <div data-bind=" text:selectedPEmail"></div>
                    <div data-bind="text:selectedPPhone"></div>
                  

                </div>
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 text-left assigntobox">
                    <hr />
                    <h4 style="display:inline;">Assign To:</h4>
                    <span data-bind="text:ContactName" style="background-color:yellow;"> </span>

                    <span>
                        <button type="button" class="btn btn-link" data-bind="click:removelink, visible:isvisible"> Remove</button>
                    </span>
                    <hr />
                    <p data-bind="visible:isvisible">
                        <span data-bind="text:ContactName" style="background-color:yellow;"></span>
                            will be assign to complete this request.
                            <span data-bind="text:ContactName" style="background-color:yellow;"> </span> will be notified via
                            <span data-bind="text:ViaType"> </span> of this request
                    </p>
                </div>
                <div class="col-lg-12 col-md-12">
                    <ul class="nav nav-tabs">
                        <li role="presentation" class="active"><a href="#SBS" data-toggle="tab" data-bind="click:displayStaff">Select Building Staff</a></li>
                        <li role="presentation"><a href="#NewContact" data-toggle="tab">New Contractor</a></li>
                        <li role="presentation"><a href="#SC" data-toggle="tab">Select Contractor</a></li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane fade in active" id="SBS">
                            <p style="margin: 20px 0 20px 0;">Please assign this request to one of the following building member by clicking on the hand.</p>
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 nopadding" data-bind="foreach:BSArray">
                                <div class="sbsrows">
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-5 sbsrows_inside_left ">

                                        <span class="SBS_Font" data-bind="text:FullName"></span>
                                        <span class="SBS_Font" data-bind="text:Tel" style="margin-left:20px;"></span>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-3 sbsrows_inside_left ">
                                        <select class=" form-control displayinline dopdownvia" data-bind="options:ViaDropDown,  optionsText:'Name',optionsValue:'value', event:{change:  onChange}"></select>
                                    </div>
                                        <div class="col-lg-2 col-md-2 col-sm-2 col-xs-4 sbsrows_inside_right " data-bind="click:assigntofunction">
                                            <button type="button" class="btn btn-primary">assign</button>
                                        </div>
                                    </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="NewContact">
                            Create New Contractor
                        </div>
                        <div class="tab-pane fade" id="SC">
                            Select Contrator
                        </div>
                    </div>
                </div>
                <!--Form-->
                <div class="col-lg-12 col-md-12 blueDefault" data-bind="foreach:buildingUsers">
                    <div data-bind="text:BuildingUserName">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default " data-dismiss="modal" data-bind="click:removelink">Cancel</button>
                <button class="btn btn-info " type="button" data-dismiss="modal" data-bind="click:ApplyUpdate">Apply Update</button>
            </div>
        </div>
    </div>
</div>



@section scripts
{
<script src="~/Scripts/jquery-2.1.3.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.11.4.min.js"></script>
    <script src="~/Scripts/knockout-3.1.0.js"></script>
    <script type="text/javascript">
        // alert("dss");
        $(function () {

            $('#NewContractor a').click(function (e) {
                e.preventDefault()
                $(this).tab('show')
            })


            var viewModel = function () {
                // =====year=======
                function YearC(value) {
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));
                    return (dt.getFullYear());
                }
                // =====Month=======
                function MonthC(value) {
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));
                    return (dt.getMonth());
                }
                // =====Day=======
                function DayC(value) {
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));
                    return dt.getDate();

                }

                // =====Hour=======
                function HoursC(value) {
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(value); l
                    var dt = new Date(parseFloat(results[1]));
                    return dt.getHours();
                }
                // =====Minutes=======
                function MinutesC(value) {
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));
                    return dt.getMinutes();
                }

                var self = this;

                LoadFirst();

                


                //this section belongs to the tabs
                self.applySBS = ko.observable(false);
                self.applysc = ko.observable(false);

                //self.AjaxBUaccess = ko.observable(true);

                
                //Building staff info
                var via = [{ Name: 'Email', value: 'Email' }, { Name: 'Phone', value: 'Phone' }, { Name: 'Messenger', value: 'Messenger' }, { Name: 'Other', value: 'Other' }];
                self.ViaDropDown = ko.observableArray(via);
                //self.ViaDropDown = ko.observableArray(via);

                  //var TempData = [{ Name: 'Dioscar', LastName: 'Rodriguez', Tel: '3476558974'},
                  //                { Name: 'Juan ', LastName: 'Smith', Tel: '7189548658' }];
                  self.BSArray = ko.observableArray();

                  self.holdvalues = ko.observable();

                //alert(JSON.stringify(self.BSArray()));
                //AssignTo
                self.AssignTo = ko.observableArray();
                self.isvisible = ko.observable(false);
                self.ContactName = ko.observable();
                self.ContactLastName = ko.observable();
                self.ViaType = ko.observable("Email");

                self.UpdateAssignID = ko.observable();
                self.UpdateRequestID = ko.observable()
                self.UpdateNotes = ko.observable("this is a note");
                

                self.txtVia = ko.observable();
                self.ViaEmail = function (via) {
                    self.txtVia(via);
                };

                var AjaxBUaccess = true;


                self.assigntofunction = function (data) {


                    var myvalue = ko.toJSON(data);
                    var myjson = JSON.parse(myvalue);
                    self.UpdateAssignID(myjson.UserID)

                    self.ContactName(myjson.FullName);
                    self.BSArray.removeAll();
                    self.BSArray.push({
                        FullName: myjson.FullName,
                        Tel: myjson.Phone,
                        UserID: myjson.UserID,
                        BuildingID: myjson.UserID.BuildingID
                    });
                    AjaxBUaccess = false;


                  //self.ContactLastName(myjson.LastName)


                    self.isvisible(true);
                    //alert(JSON.stringify(self.selectedAssignto()));

                };
                

                self.removelink = function () {
                    AjaxBUaccess = true;

                    self.displayStaff();
                    self.ContactName(""),
                      self.ContactLastName("")
                    self.isvisible(false);

                }

                self.onChange = function (data, event) {
                    var selectedText = event.currentTarget.selectedOptions[0].value;
                    self.ViaType(selectedText);
                    //console.log(selectedText);
                    //alert(JSON.stringify(data));
                };


                

                self.displayStaff = function (data, event) {
                    if (AjaxBUaccess == true) {

                        $.ajax(
                           {
                               type: "GET",
                               url: '/building/BuildingUsersList/',
                               data: { buildingID: "@Model.buildingID" },
                               dataType: "json",
                               success: function (data) {
                                   self.BSArray.removeAll();
                                   var jsonresult = JSON.stringify(data.Data);// Json.stringify make an object into a json string


                                   var TrkPkgs = JSON.parse(jsonresult); //JSON.parse makes a json string into a json object example obj.FirstName
                                   for (var i = 0; i < TrkPkgs.length; i++) {
                                       self.BSArray.push({
                                           FullName: TrkPkgs[i].FullName,
                                           Tel: TrkPkgs[i].Phone,
                                           UserID: TrkPkgs[i].UserID,
                                           BuildingID: TrkPkgs[i].UserID.BuildingID
                                       });
                                   }
                               }
                           });
                    };
                }



               
                    $.ajax(
                        {
                            type: "GET",
                            url: '/building/BuildingUsersList/',
                            data: { buildingID: "@Model.buildingID" },
                            dataType: "json",
                            success: function (data) {
                                self.BSArray.removeAll();
                                var jsonresult = JSON.stringify(data.Data);// Json.stringify make an object into a json string

                                var TrkPkgs = JSON.parse(jsonresult); //JSON.parse makes a json string into a json object example obj.FirstName
                                for (var i = 0; i < TrkPkgs.length; i++) {
                                    self.BSArray.push({
                                        FullName: TrkPkgs[i].FullName,
                                        Tel: TrkPkgs[i].Phone,
                                        UserID: TrkPkgs[i].UserID,
                                        BuildingID: TrkPkgs[i].UserID.BuildingID
                                    });
                                }
                            }
                        });
                





                var items = ([{ Text: "Assign To New", Value: "1" }, { Text: "Assign To Existing", Value: "2" }, { Text: "Close Ticket", Value: "3" }]);

                self.itemsoptions = ko.observableArray(items);
                self.RepairRequest = ko.observableArray();
                self.value_changed = ko.observable();
                self.selectedRequestDate = ko.observable();
                self.selectedAssignto = ko.observable();
                self.selectedDescription = ko.observable();
                self.selectedID = ko.observable();//------needed to update request -----
                self.selectedStatus = ko.observable();
                self.selectedRequestNumber = ko.observable();
                self.selectedCategory = ko.observable();
                self.selectedCName = ko.observable();
                self.selectedCEmail = ko.observable();
                self.selectedCphone = ko.observable();
                self.selectedPName = ko.observable();
                self.selectedPEmail = ko.observable();
                self.selectedPPhone = ko.observable();
                self.selectedPhotoURL = ko.observable();


                //alert(selectedID());
                
                //self.UpdateRequestID(self.selectedID());


                self.selectedRequest = function (value, event) {

                    var myvalue = ko.toJSON(value);
                    var myjson = JSON.parse(myvalue);
                    self.selectedRequestDate(myjson.RequestedDate);
                    self.selectedAssignto(myjson.RequestedDate);
                    self.selectedDescription(myjson.Description);
                    self.selectedID(myjson.ID);
                    self.selectedStatus(myjson.Status);
                    self.selectedRequestNumber(myjson.RequestNumber);
                    self.selectedPName(myjson.PName);
                    self.selectedPEmail(myjson.PEmail);
                    self.selectedPPhone(myjson.PPhone);


                    if (myjson.AssignToID != null)
                    {
                        $.ajax(
                     {
                         type: "GET",
                         url: '/building/LoadingAssignTo/',
                         data: { UserID: myjson.AssignToID },
                         dataType: "json",
                         success: function (data) {
                             var jsonresult = JSON.stringify(data.Data);// Json.stringify make an object into a json string

                             var TrkPkgs = JSON.parse(jsonresult); //JSON.parse makes a json string into a json object example obj.FirstName
                             for (var i = 0; i < TrkPkgs.length; i++) {
                                 self.buildingUsers.push({


                                     BuildingUserName: ko.observable("Fullname")
                                 });
                             }
                         }
                     });

                    }


                  

                   

                    
                    self.UpdateRequestID(myjson.ID);

                  

                  





                    //var updatedRequest =
                    //    {
                    //        selectedRequestDate: ko.observable(myjson.RequestedDate)
                    //    }


                 
                };
                //----------------apply updates to save on db--------------------
                self.ApplyUpdate = function () {
                  //  alert(self.UpdateAssignID() + " " + self.selectedID() + " " + self.UpdateNotes())

                    $.ajax(
                       {
                           type: "POST",
                           url: '/building/ApplyUpdatesRepairRequest/',
                           data: { UserID: self.UpdateAssignID(), RepairRequestID: self.selectedID(), Notes: self.UpdateNotes() },
                           dataType: "json",
                           success: function (data) {
                               LoadFirst();
                               AjaxBUaccess = true;

                               self.displayStaff();
                               self.ContactName(""),
                                 self.ContactLastName("")
                               self.isvisible(false);


                               //var jsonresult = JSON.stringify(data.Data);// Json.stringify make an object into a json string

                               //var TrkPkgs = JSON.parse(jsonresult); //JSON.parse makes a json string into a json object example obj.FirstName
                               //for (var i = 0; i < TrkPkgs.length; i++) {
                               //    self.buildingUsers.push({
                               //        BuildingUserName: ko.observable("Fullname")
                               //    });
                               //}
                           }
                       });

                };
                //----------------End apply updates to save on db--------------------
                self.buildingUsers = ko.observableArray();
                self.ListBuildingUsers = function () {
                    $.ajaxSettings.traditional = true;
                    $.ajax(
                        {
                            type: "GET",
                            url: '/building/BuildingUsersList/',
                            data: { buildingID: "@Model.buildingID" },
                            dataType: "json",
                            success: function (data) {
                                var jsonresult = JSON.stringify(data.Data);// Json.stringify make an object into a json string

                                var TrkPkgs = JSON.parse(jsonresult); //JSON.parse makes a json string into a json object example obj.FirstName
                                for (var i = 0; i < TrkPkgs.length; i++) {
                                    self.buildingUsers.push({
                                        BuildingUserName: ko.observable("Fullname")
                                    });
                                }
                            }
                        });
                };


                function LoadFirst() {

                  //  alert("I am First");



                    $.ajaxSettings.traditional = true;
                    $.ajax({
                        type: "GET",
                        url: '/building/BuildingRepairResquest/',
                        data: { buildingID: "@Model.buildingID" },
                        dataType: "json",
                        success: function (data) {
                            self.RepairRequest.removeAll();
                            var jsonresult = JSON.stringify(data.Data);// Json.stringify make an object into a json string

                            var TrkPkgs = JSON.parse(jsonresult); //JSON.parse makes a json string into a json object example obj.FirstName
                            for (var i = 0; i < TrkPkgs.length; i++) {


                                var RDate = MonthC(TrkPkgs[i].RequestedDate) + "/" + DayC(TrkPkgs[i].RequestedDate) + "/" + YearC(TrkPkgs[i].RequestedDate);

                                self.RepairRequest.push({
                                    RequestedDate: ko.observable(RDate),
                                    Assignto: ko.observableArray(items),
                                    Description: TrkPkgs[i].Description,
                                    ID: TrkPkgs[i].ID,
                                    Status: TrkPkgs[i].Status,
                                    RequestNumber: TrkPkgs[i].RequestNumber,
                                    Category: TrkPkgs[i].Category,
                                    PhotoUrl: TrkPkgs[i].PhotoUrl,
                                    Urgency: TrkPkgs[i].Urgency,
                                    CName: TrkPkgs[i].CName,
                                    CEmail: TrkPkgs[i].CEmail,
                                    CPhone: TrkPkgs[i].CPhone,
                                    PName: TrkPkgs[i].PName,
                                    PEmail: TrkPkgs[i].PEmail,
                                    PPhone: TrkPkgs[i].PPhone,
                                    AssignToID: TrkPkgs[i].AssignToID,
                                    AssignedFullName: TrkPkgs[i].AssignedFullName

                                });
                            }
                        }
                    });

                };


                //when a selected value this will get the value related with the element
                self.value_changed.subscribe(function (value) {
                    var myvalue = ko.toJSON(value);
                    var myjson = JSON.parse(myvalue);


                    alert(myvalue);
                });



            };

            ko.applyBindings(viewModel);

        });




    </script>




}