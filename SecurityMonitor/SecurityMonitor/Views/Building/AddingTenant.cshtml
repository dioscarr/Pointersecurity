@model SecurityMonitor.Models.TenantVM

@{
    ViewBag.Title = "Adding Tenant";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<div class="row " style="padding-bottom:450px; background-image:url(/img/AddingTenant1.PNG); background-size:cover; background-position-y:center; background-position-x:left;">
    <div class="col-md-3 col-sm-6  col-sx-12 off col-md-offset-4 col-sm-offset-3" style="padding-top:200px;">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <!--Title-->
                <div class=" text-left col-md-12" style="padding-left:100px;">
                    <h1>Moving in!</h1>
                </div>
                <div class=" text-right col-md-12" style="padding-left:100px;">
                    @Html.ActionLink("Not Yet!", "ApartmentProfile", new { ApartmentID = @Model.aptID, BuildingID = @Model.BuildingID })
                </div>
                <!--FirstName input box-->
                <div class="ClientEditrows">
                    @Html.EditorFor(model => model.FirstName, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   @placeholder = "First Name",
                   @data_bind = "value:FName, valueUpdate:'afterkeydown'"
               }
           })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    <div id="idFirstName" class="" style="position:relative; left:290px; top:-25px;"></div>
                </div>

                <!--LastName InputBox-->
                <div class="ClientEditrows">
                    @Html.EditorFor(model => model.LastName, new
       {
           htmlAttributes = new
           {
               @class = "form-control",
               @placeholder = "Last Name",
               @data_bind = "value:LName, valueUpdate:'afterkeydown'"
           }
       })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    <div id="idLastName" class="" style="position:relative; left:290px; top:-25px;"></div>
                </div>

                <!--Phone Number-->
                <div class="ClientEditrows">
                    @Html.EditorFor(model => model.Phone, new
       {
           htmlAttributes = new
           {
               @class = "form-control",
               @placeholder = "Phone",
               @data_bind = "value:Phone, valueUpdate:'afterkeydown'",
               @maxlength = "10"
           }
       })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    <div id="idPhone" class="" style="position:relative; left:290px; top:-25px;"></div>
                </div>
                <!--Username box-->
                <div class="ClientEditrows">
                    @Html.EditorFor(model => model.Username, new
       {
           htmlAttributes = new
           {
               @class = "form-control",
               @placeholder = "Username/Email",
               @data_bind = "value:Username, valueUpdate:'afterkeydown'",
               @maxlength = "100"
           }
       })
                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    <div id="idUsername" class="" style="position:relative; left:290px; top:-25px;"></div>
                </div>

                <div class="ClientEditrows">
                    @Html.CheckBoxFor(model => model.GenerateAutomaticPassword, new {id="generatePasswordid", @data_bind="checked:Check" }) @Html.Label("Genarate Password")
                    <div hidden="hidden" class="autogepassword" data-bind="value:Check">autogenerated password</div>
                   
                    @Html.EditorFor(model => model.Password, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control hideme",
                               @placeholder = "Password",
                               @data_bind = "value:Password, valueUpdate:'afterkeydown'",
                               @maxlength = "20"
                           }
                       })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    <div id="idPassword" class="" style="position:relative; left:290px; top:-25px;"></div>
                </div>
                <div class="col-md-12"><p> @Html.CheckBoxFor(model=>model.EmailNotification,true) @Html.Label(" Email/Notification")</p></div>
                <div class="col-md-12"><p> @ViewBag.Message</p></div>



                @Html.HiddenFor(model => model.aptID)
                @Html.HiddenFor(model => model.BuildingID)

            </div>


            <div class="" style="padding-bottom:200px;">
                <input type="submit" id="submitlgmd" value="Create" class="btn btn-default  " style="width:100%; " />
            </div>


        }
    </div>
</div>

@section scripts{

    <script src="~/Scripts/jquery-2.1.1.min.js"></script>
    <script src="~/Scripts/knockout-3.1.0.js"></script>

    <script type="text/javascript">

        $(document).ready(function () {
            $('#generatePasswordid').change(function () {
                if ($(this).is(':checked') == true) {
                    //alert("it is checked");
                    $('.hideme').hide();
                    $('.autogepassword').show();

                }
                else {
                    //alert("it is not checked");
                    $('.hideme').show();
                    $('.autogepassword').hide();
                }
            });

            function ViewModel() {
                FName = ko.observable("");
                LName = ko.observable("");
                Phone = ko.observable("");
                Username = ko.observable("");
                Password = ko.observable("");
                Check = ko.observable();


                this.Checkboxpassword = ko.computed(function () {
                    if (Check() == true) {
                        this.Password("itwordks");

                    }
                    else
                    {
                            this.Password("");
                    }

                });




                //Checks if Fname has chr
                this.ComputeFName = ko.computed(function () {
                    if (FName().length > 0) {
                        $('#idFirstName').css("color", "green");
                        $('#idFirstName').removeClass('glyphicon glyphicon-asterisk');
                        $('#idFirstName').addClass('glyphicon glyphicon-ok');
                        return 'chars: ' + FName().length;
                    } else {
                        $('#idFirstName').removeClass('glyphicon glyphicon-ok');
                        $('#idFirstName').css("color", "red");
                        $('#idFirstName').addClass('glyphicon glyphicon-asterisk');
                    }
                });

                //Checks if Lname has chr
                this.ComputeLName = ko.computed(function () {
                    if (LName().length > 0) {
                        $('#idLastName').css("color", "green");
                        $('#idLastName').removeClass('glyphicon glyphicon-asterisk');
                        $('#idLastName').addClass('glyphicon glyphicon-ok');
                        return 'chars: ' + LName().length;
                    } else {
                        $('#idLastName').removeClass('glyphicon glyphicon-ok');
                        $('#idLastName').css("color", "red");
                        $('#idLastName').addClass('glyphicon glyphicon-asterisk');
                    }
                });

                //Checks if  has Phone digits
                this.ComputePhone = ko.computed(function () {
                    if (Phone().length > 0) {
                        $('#idPhone').css("color", "green");
                        $('#idPhone').removeClass('glyphicon glyphicon-asterisk');
                        $('#idPhone').addClass('glyphicon glyphicon-ok');
                        return 'chars: ' + Phone().length;
                    }
                    else {
                        $('#idPhone').removeClass('glyphicon glyphicon-ok');
                        $('#idPhone').css("color", "red");
                        $('#idPhone').addClass('glyphicon glyphicon-asterisk');
                    }
                });

                //Checks if Username has chr
                this.Computeusername = ko.computed(function () {
                    if (Username().length > 0) {
                        $('#idUsername').css("color", "green");
                        $('#idUsername').removeClass('glyphicon glyphicon-asterisk');
                        $('#idUsername').addClass('glyphicon glyphicon-ok');
                        return 'chars: ' + Username().length;
                    } else {
                        $('#idUsername').removeClass('glyphicon glyphicon-ok');
                        $('#idUsername').css("color", "red");
                        $('#idUsername').addClass('glyphicon glyphicon-asterisk');
                    }
                });

                //Checks if password has chr
                this.Computepassword = ko.computed(function () {
                    if (Password().length > 0) {
                        $('#idPassword').css("color", "green");
                        $('#idPassword').removeClass('glyphicon glyphicon-asterisk');
                        $('#idPassword').addClass('glyphicon glyphicon-ok');
                        return 'chars: ' + Username().length;
                    } else {
                        $('#idPassword').removeClass('glyphicon glyphicon-ok');
                        $('#idPassword').css("color", "red");
                        $('#idPassword').addClass('glyphicon glyphicon-asterisk');
                    }
                });


                this.btnStat = ko.computed(function () {
                    //debugger;
                    if (
                        FName().length > 0 &&
                        LName().length > 0 &&
                        Phone().length > 0 &&
                        Password().length > 0 &&
                        Username().length > 0
                        ) {
                        $('#submitlgmd').prop("disabled", false);
                        //$('#submitlgmd_B').prop("disabled", false);
                    }
                    else {
                        $('#submitlgmd').prop("disabled", true);
                        //$('#submitlgmd_B').prop("disabled", true);
                    }
                }, this);
            };

            ko.applyBindings(new ViewModel());




        });
    </script>
}
