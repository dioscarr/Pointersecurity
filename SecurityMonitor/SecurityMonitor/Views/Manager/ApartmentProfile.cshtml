@model IEnumerable<SecurityMonitor.Models.ApartmentVM>
@using Doormandondemand;
@using SecurityMonitor.Models;
@{
    ViewBag.Title = "ApartmentProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var buildinginfo = (BuildingInfoVM)Session["Building"];

}

<!--========================Top section====================-->
<div class="row " style="height:500px; background-image:url(/img/whiteinterior.jpg); background-size:cover; background-position-y:center;">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 text-center hollow3 whity" style=" padding-top:30px; padding-bottom:30px;" 
    onclick="location.href = '@Url.Action("buildingProfile", "Building", new { buildingID = @buildinginfo.BuildingID })'">
        <span style="color:white;">Return To Building</span>

    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4    " style="padding-top:0px; padding-bottom:0px;">
        <h1 > @buildinginfo.BuildingName</h1>
        <br /><span class="" style="color:white; font-size:20px;">@buildinginfo.Address</span>
        <br /><span class="" style="color:white;">@buildinginfo.City @buildinginfo.States @buildinginfo.ZipCode </span>
    </div>
    <div class="col-lg-8 col-md-8 col-sm-8 col-xs-8  " style="height:178px;">

    </div>
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12  " style="padding-top:200px;">
        @*<button type="button" class="btn btn-default "
                onclick="location.href = '@Url.Action("deleteApartment", "Building", new { ApartmentID = @buildinginfo.ID })'">
            Delete this Apartment
        </button>*@

        @*@foreach (var item in Model)
        {

            <button type="button" class="btn btn-default pull-right"
                    onclick="location.href = '@Url.Action("AddingTenant", "Building", new { apartmentID = @item.ID, BuildingID = @buildinginfo.ID })'">
                Add Tenant to this apartment
            </button>
        }*@
    </div>

    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 text-center  whity ">
        @foreach (var item in Model)
        {
            <h1 style="font-size:170px; color:white; ">@Html.DisplayFor(modelItem => item.ApartmentNumber)</h1>
        }
    </div>
</div>

<div class="row " style="padding-bottom:40px;">
    <!--=================Tenant==================-->
    <!--add tenant-->
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="border-top:1px solid lightgrey;">

    </div>
</div>

@foreach (Tenant item in ViewBag.tenant)
{
    <div class=" row  hollow3  " style="border-bottom:1px solid lightgrey; ">
        <!--tenant information-->
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6" style="height:200px;">

            <div class=" glyphicon glyphicon-user " style="font-size:40px; padding-top:10px; "></div>
            @*<button type="button" class="btn btn-link "
                    onclick="location.href = '@Url.Action("TenantEdit", "Building", new { TenantID = @item.ID })'">
                Edit
            </button>*@
            <br />
            <h4>@item.FirstName @item.LastName</h4><br />
            <div class="" style="position:relative; top:-15px;">
                Phone: @item.Phone <br />
                Created on @item.Created
                <br />


                @*<button type="button" class="btn btn-link " style="margin-left:-10px;"
                        onclick="location.href = '@Url.Action("TenantDelete", "Building", new { TenantID = @item.ID })'">
                    Remove this Tenant
                </button>*@
            </div>
        </div>
        <!--advance options-->
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-6" style="height:160px;">



            <button type="button" class="btn btn-link" style="margin:9px;"
                    onclick="location.href = '@Url.Action("TenantRequest", "Building", new { TenantID = @item.ID, BuildingID = @buildinginfo.BuildingID,  })'">
                New Access Request
            </button>
            <br />
            <button type="button" class="btn btn-link" style="margin:9px;"
                    onclick="location.href = '@Url.Action("TenantDeliveryIndex", "Building", new { TenantID = @item.ID })'">
                Deliveries
            </button>
            <br />
            <button type="button" class="btn btn-link" style="margin:9px;"
                    onclick="location.href = '@Url.Action("TenantMessegeCenterIndex", "Building", new { TenantID = @item.ID })'">
                Message Center
            </button>
            <br />
            <button type="button" class="btn btn-link" style="margin:9px;"
                    onclick="location.href = '@Url.Action("RequestHistoryIndex", "Building", new { TenantID = @item.ID })'">
                History
            </button>


        </div>

        <!--========================Request box===============================-->
        @*<canvas id="doughNutChartLoc@(item.ID)" data-tenantid="@item.ID" class="mygraph" height="100" width="100" ></canvas>*@
    </div>
}



<!--=================tenant ends==================-->

   

    


@section scripts
{



  
<script src="~/Scripts/jquery-2.1.1.min.js"></script>

    <script src="~/Scripts/Chart.min.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="~/Scripts/HighChart/highcharts.js"></script>
<script src="~/Scripts/HighChart/modules/exporting.js"></script>
   <script type="text/javascript">
    $(document).ready(function (e) {
       
        
       
        //=====================lINE CHARTChart==============================
        
        //var data2 = {
        //    labels: ["January", "February", "March", "April", "May", "June", "July"],
        //    datasets: [
        //        {
        //            label: "My First dataset",
        //            fillColor: "#baeac5",
        //            strokeColor: "rgba(220,220,220,0.8)",
        //            highlightFill: "#baeac5",
        //            highlightStroke: "rgba(220,220,220,1)",
        //            data: [65, 59, 80, 81, 56, 55, 40]
        //        }
        //    ]
        //};

        //var options = {

        //    responsive: true,
        //    maintainAspectRatio: true
        //}
       
        
        //var myBar = new Chart(document.getElementById("Bargraph").getContext("2d")).Bar(data2, options);
      
        //=====================Line Chart ends==============================

        //=====================Circle charts for the tenants==============================
        
        var canvascount = document.getElementsByTagName("canvas");
       
        
        for (var i = 0; i <= canvascount.length - 1; i++)
        {   var datachart =[];
        var data_TenantID = canvascount[i].getAttribute("data-tenantid");
       


       
        
           
     
        $.ajax({
            async: false,
            type: "GET",
            data:{TenantID: data_TenantID},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            url: "/Building/getRequestsType/",
            success: function(jsonData) {
               
                for(var j=0; j<jsonData.length; j++)
                {
                    //array of colors
                    var colors = ["#0000FF",
                                   "#8A2BE2",
                                   "#6495ED",
                                   "lightblue", 
                                   "lightgreen", 
                                   "orange",
                                   "yellow",
                                   "#32CD32",
                                   "#FF4500", 
                                   "#FF6347",
                                   "#008080",
                                   "#9ACD32",
                                   "#FFE4B5",
                                   "#FFE4E1",
                                   "#0000CD",
                                   "#9370DB",
                                   "#B0C4DE",
                                   "#7FFFD4"
                    ];                
                    var rand = Math.floor(Math.random()*colors.length);
                 
                    //Legend Data[].Key shows type name
                    //Legend: Data[].(type) show the count of the type
                    datachart.push({value:jsonData[j].AccessControl , color: colors[rand],label:  jsonData[j].key});    
                   
                }
                drawmychart(datachart);
             
               
            }
        });




        
      
      



       
          
            function drawmychart(data1){
                var options = { responsive: true }
                var myDoughnut = new Chart(document.getElementById("doughNutChartLoc" + data_TenantID).getContext("2d")).Pie(data1,options);
            }
        };
        //=====================Circle charts for the tenants ends==============================
      
        
    

        


       
      









    });
</script>

}